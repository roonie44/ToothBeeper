
C:\Users\Marcin\OneDrive\STM32\workspace_TrueSTUDIO\ToothBeeper\Debug\ToothBeeper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000114c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012d4  080012dc  000112dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080012d4  080012d4  000112d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012d8  080012d8  000112d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000112dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  000112dc  2**0
                  CONTENTS
  7 .bss          00000038  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000038  20000038  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000032  00000000  00000000  000112dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003b78  00000000  00000000  0001130e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000c18  00000000  00000000  00014e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000002b8  00000000  00000000  00015a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000248  00000000  00000000  00015d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001848  00000000  00000000  00015f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001434  00000000  00000000  000177e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00018c1a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000009f4  00000000  00000000  00018c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080012bc 	.word	0x080012bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080012bc 	.word	0x080012bc

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f043 0201 	orr.w	r2, r3, #1
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	601a      	str	r2, [r3, #0]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	683a      	ldr	r2, [r7, #0]
 800022e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	683a      	ldr	r2, [r7, #0]
 800024a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <_ZN13CBuzzerModule6HandleEv>:
#include "main.hpp"

void CBuzzerModule::Handle(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if(u32BeepCount)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d02c      	beq.n	80002c2 <_ZN13CBuzzerModule6HandleEv+0x6a>
	{
		if(Beep)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d010      	beq.n	8000292 <_ZN13CBuzzerModule6HandleEv+0x3a>
		{
			Beep = false;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
			LL_GPIO_ResetOutputPin(PIN_BUZZER_VCC_PORT, PIN_BUZZER_VCC_PIN);
 8000276:	2102      	movs	r1, #2
 8000278:	4814      	ldr	r0, [pc, #80]	; (80002cc <_ZN13CBuzzerModule6HandleEv+0x74>)
 800027a:	f7ff ffb3 	bl	80001e4 <LL_GPIO_ResetOutputPin>
			LL_TIM_SetAutoReload(TIM6, BUZZER_BEEP_INTERVAL);
 800027e:	2196      	movs	r1, #150	; 0x96
 8000280:	4813      	ldr	r0, [pc, #76]	; (80002d0 <_ZN13CBuzzerModule6HandleEv+0x78>)
 8000282:	f7ff ffdb 	bl	800023c <LL_TIM_SetAutoReload>
			u32BeepCount--;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	1e5a      	subs	r2, r3, #1
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	e00c      	b.n	80002ac <_ZN13CBuzzerModule6HandleEv+0x54>
		}
		else
		{
			Beep = true;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]
			LL_GPIO_SetOutputPin(PIN_BUZZER_VCC_PORT, PIN_BUZZER_VCC_PIN);
 8000298:	2102      	movs	r1, #2
 800029a:	480c      	ldr	r0, [pc, #48]	; (80002cc <_ZN13CBuzzerModule6HandleEv+0x74>)
 800029c:	f7ff ff94 	bl	80001c8 <LL_GPIO_SetOutputPin>
			LL_TIM_SetAutoReload(TIM6, u32BeepLength);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4619      	mov	r1, r3
 80002a6:	480a      	ldr	r0, [pc, #40]	; (80002d0 <_ZN13CBuzzerModule6HandleEv+0x78>)
 80002a8:	f7ff ffc8 	bl	800023c <LL_TIM_SetAutoReload>
		}

		if(u32BeepCount > 0)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <_ZN13CBuzzerModule6HandleEv+0x6a>
		{
			LL_TIM_SetCounter(TIM6, 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	4806      	ldr	r0, [pc, #24]	; (80002d0 <_ZN13CBuzzerModule6HandleEv+0x78>)
 80002b8:	f7ff ffb2 	bl	8000220 <LL_TIM_SetCounter>
			LL_TIM_EnableCounter(TIM6);
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <_ZN13CBuzzerModule6HandleEv+0x78>)
 80002be:	f7ff ff9f 	bl	8000200 <LL_TIM_EnableCounter>
		}
	}
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	48000800 	.word	0x48000800
 80002d0:	40001000 	.word	0x40001000

080002d4 <_ZN13CBuzzerModule9BeepShortEj>:

void CBuzzerModule::BeepShort(unsigned int u32BeepCount)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
	this->u32BeepCount 	= u32BeepCount;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	605a      	str	r2, [r3, #4]
	this->u32BeepLength 	= BUZZER_BEEP_SHORT_LENGTH;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2264      	movs	r2, #100	; 0x64
 80002e8:	609a      	str	r2, [r3, #8]
	Handle();
 80002ea:	6878      	ldr	r0, [r7, #4]
 80002ec:	f7ff ffb4 	bl	8000258 <_ZN13CBuzzerModule6HandleEv>
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <_ZN13CBuzzerModule8BeepLongEj>:

void CBuzzerModule::BeepLong(unsigned int u32BeepCount)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
	this->u32BeepCount 	= u32BeepCount;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	683a      	ldr	r2, [r7, #0]
 8000306:	605a      	str	r2, [r3, #4]
	this->u32BeepLength	= BUZZER_BEEP_LONG_LENGTH;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800030e:	609a      	str	r2, [r3, #8]
	Handle();
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f7ff ffa1 	bl	8000258 <_ZN13CBuzzerModule6HandleEv>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop

08000320 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	683a      	ldr	r2, [r7, #0]
 800032e:	619a      	str	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	683a      	ldr	r2, [r7, #0]
 800034a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <_ZN14CDisplayModule4InitEv>:
#include "main.hpp"

void CDisplayModule::Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	DigitClear();
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f000 f9df 	bl	8000724 <_ZN14CDisplayModule10DigitClearEv>
	DigitSelect(DISPLAY_DIGIT_OFF);
 8000366:	21ff      	movs	r1, #255	; 0xff
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	f000 f867 	bl	800043c <_ZN14CDisplayModule11DigitSelectEj>
	u32DigitCurrent = 0;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <_ZN14CDisplayModule6HandleEv>:

void CDisplayModule::Handle(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	DigitClear();
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	f000 f9cd 	bl	8000724 <_ZN14CDisplayModule10DigitClearEv>
	u32DigitCurrent = (u32DigitCurrent + 1) % DISPLAY_DIGIT_COUNT;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	1c59      	adds	r1, r3, #1
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <_ZN14CDisplayModule6HandleEv+0x4c>)
 8000392:	fba3 2301 	umull	r2, r3, r3, r1
 8000396:	085a      	lsrs	r2, r3, #1
 8000398:	4613      	mov	r3, r2
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	4413      	add	r3, r2
 800039e:	1aca      	subs	r2, r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	605a      	str	r2, [r3, #4]
	DigitSelect(u32DigitCurrent);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4619      	mov	r1, r3
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f000 f846 	bl	800043c <_ZN14CDisplayModule11DigitSelectEj>
	DigitSet(u8Digit[u32DigitCurrent]);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	5cd3      	ldrb	r3, [r2, r3]
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f880 	bl	80004c0 <_ZN14CDisplayModule8DigitSetEh>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	aaaaaaab 	.word	0xaaaaaaab

080003cc <_ZN14CDisplayModule8PrintDecEj>:

void CDisplayModule::PrintDec(unsigned int u32Number)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
	for(int s32Idx = 0; s32Idx < DISPLAY_DIGIT_COUNT; s32Idx++)
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	dc25      	bgt.n	800042c <_ZN14CDisplayModule8PrintDecEj+0x60>
	{
		if(u32Number == 0 && s32Idx != 0)
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d108      	bne.n	80003f8 <_ZN14CDisplayModule8PrintDecEj+0x2c>
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d005      	beq.n	80003f8 <_ZN14CDisplayModule8PrintDecEj+0x2c>
		{
			u8Digit[s32Idx] = DISPLAY_DIGIT_OFF;
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	4413      	add	r3, r2
 80003f2:	22ff      	movs	r2, #255	; 0xff
 80003f4:	701a      	strb	r2, [r3, #0]
 80003f6:	e015      	b.n	8000424 <_ZN14CDisplayModule8PrintDecEj+0x58>
		}
		else
		{
			u8Digit[s32Idx] = u32Number % 10;
 80003f8:	6839      	ldr	r1, [r7, #0]
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <_ZN14CDisplayModule8PrintDecEj+0x6c>)
 80003fc:	fba3 2301 	umull	r2, r3, r3, r1
 8000400:	08da      	lsrs	r2, r3, #3
 8000402:	4613      	mov	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4413      	add	r3, r2
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	1aca      	subs	r2, r1, r3
 800040c:	b2d1      	uxtb	r1, r2
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	4413      	add	r3, r2
 8000414:	460a      	mov	r2, r1
 8000416:	701a      	strb	r2, [r3, #0]
			u32Number /= 10;
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	4a07      	ldr	r2, [pc, #28]	; (8000438 <_ZN14CDisplayModule8PrintDecEj+0x6c>)
 800041c:	fba2 2303 	umull	r2, r3, r2, r3
 8000420:	08db      	lsrs	r3, r3, #3
 8000422:	603b      	str	r3, [r7, #0]
	DigitSet(u8Digit[u32DigitCurrent]);
}

void CDisplayModule::PrintDec(unsigned int u32Number)
{
	for(int s32Idx = 0; s32Idx < DISPLAY_DIGIT_COUNT; s32Idx++)
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	3301      	adds	r3, #1
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	e7d6      	b.n	80003da <_ZN14CDisplayModule8PrintDecEj+0xe>
		{
			u8Digit[s32Idx] = u32Number % 10;
			u32Number /= 10;
		}
	}
}
 800042c:	bf00      	nop
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	cccccccd 	.word	0xcccccccd

0800043c <_ZN14CDisplayModule11DigitSelectEj>:
		u32Number >>= 4;
	}
}

void CDisplayModule::DigitSelect(unsigned int u32DigitIdx)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
	switch(u32DigitIdx)
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d01e      	beq.n	800048a <_ZN14CDisplayModule11DigitSelectEj+0x4e>
 800044c:	2b01      	cmp	r3, #1
 800044e:	d312      	bcc.n	8000476 <_ZN14CDisplayModule11DigitSelectEj+0x3a>
 8000450:	2b02      	cmp	r3, #2
 8000452:	d024      	beq.n	800049e <_ZN14CDisplayModule11DigitSelectEj+0x62>
 8000454:	2bff      	cmp	r3, #255	; 0xff
 8000456:	d000      	beq.n	800045a <_ZN14CDisplayModule11DigitSelectEj+0x1e>
	case 2:
		LL_GPIO_SetOutputPin(PIN_DISPLAY_DIG_1_PORT, PIN_DISPLAY_DIG_1_PIN);
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_DIG_2_PORT, PIN_DISPLAY_DIG_2_PIN);
		break;
	}
}
 8000458:	e02a      	b.n	80004b0 <_ZN14CDisplayModule11DigitSelectEj+0x74>
void CDisplayModule::DigitSelect(unsigned int u32DigitIdx)
{
	switch(u32DigitIdx)
	{
	case DISPLAY_DIGIT_OFF:
		LL_GPIO_SetOutputPin(PIN_DISPLAY_DIG_0_PORT, PIN_DISPLAY_DIG_0_PIN);
 800045a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800045e:	4816      	ldr	r0, [pc, #88]	; (80004b8 <_ZN14CDisplayModule11DigitSelectEj+0x7c>)
 8000460:	f7ff ff5e 	bl	8000320 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(PIN_DISPLAY_DIG_1_PORT, PIN_DISPLAY_DIG_1_PIN);
 8000464:	2104      	movs	r1, #4
 8000466:	4815      	ldr	r0, [pc, #84]	; (80004bc <_ZN14CDisplayModule11DigitSelectEj+0x80>)
 8000468:	f7ff ff5a 	bl	8000320 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(PIN_DISPLAY_DIG_2_PORT, PIN_DISPLAY_DIG_2_PIN);
 800046c:	2110      	movs	r1, #16
 800046e:	4812      	ldr	r0, [pc, #72]	; (80004b8 <_ZN14CDisplayModule11DigitSelectEj+0x7c>)
 8000470:	f7ff ff56 	bl	8000320 <LL_GPIO_SetOutputPin>
		break;
 8000474:	e01c      	b.n	80004b0 <_ZN14CDisplayModule11DigitSelectEj+0x74>
	case 0:
		LL_GPIO_SetOutputPin(PIN_DISPLAY_DIG_2_PORT, PIN_DISPLAY_DIG_2_PIN);
 8000476:	2110      	movs	r1, #16
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <_ZN14CDisplayModule11DigitSelectEj+0x7c>)
 800047a:	f7ff ff51 	bl	8000320 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_DIG_0_PORT, PIN_DISPLAY_DIG_0_PIN);
 800047e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000482:	480d      	ldr	r0, [pc, #52]	; (80004b8 <_ZN14CDisplayModule11DigitSelectEj+0x7c>)
 8000484:	f7ff ff5a 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 8000488:	e012      	b.n	80004b0 <_ZN14CDisplayModule11DigitSelectEj+0x74>
	case 1:
		LL_GPIO_SetOutputPin(PIN_DISPLAY_DIG_0_PORT, PIN_DISPLAY_DIG_0_PIN);
 800048a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800048e:	480a      	ldr	r0, [pc, #40]	; (80004b8 <_ZN14CDisplayModule11DigitSelectEj+0x7c>)
 8000490:	f7ff ff46 	bl	8000320 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_DIG_1_PORT, PIN_DISPLAY_DIG_1_PIN);
 8000494:	2104      	movs	r1, #4
 8000496:	4809      	ldr	r0, [pc, #36]	; (80004bc <_ZN14CDisplayModule11DigitSelectEj+0x80>)
 8000498:	f7ff ff50 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 800049c:	e008      	b.n	80004b0 <_ZN14CDisplayModule11DigitSelectEj+0x74>
	case 2:
		LL_GPIO_SetOutputPin(PIN_DISPLAY_DIG_1_PORT, PIN_DISPLAY_DIG_1_PIN);
 800049e:	2104      	movs	r1, #4
 80004a0:	4806      	ldr	r0, [pc, #24]	; (80004bc <_ZN14CDisplayModule11DigitSelectEj+0x80>)
 80004a2:	f7ff ff3d 	bl	8000320 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_DIG_2_PORT, PIN_DISPLAY_DIG_2_PIN);
 80004a6:	2110      	movs	r1, #16
 80004a8:	4803      	ldr	r0, [pc, #12]	; (80004b8 <_ZN14CDisplayModule11DigitSelectEj+0x7c>)
 80004aa:	f7ff ff47 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 80004ae:	bf00      	nop
	}
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	48000800 	.word	0x48000800
 80004bc:	48000400 	.word	0x48000400

080004c0 <_ZN14CDisplayModule8DigitSetEh>:

void CDisplayModule::DigitSet(unsigned char u8Digit)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	460b      	mov	r3, r1
 80004ca:	70fb      	strb	r3, [r7, #3]
	DigitClear();
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f000 f929 	bl	8000724 <_ZN14CDisplayModule10DigitClearEv>

	switch(u8Digit)
 80004d2:	78fb      	ldrb	r3, [r7, #3]
 80004d4:	2b05      	cmp	r3, #5
 80004d6:	f000 8094 	beq.w	8000602 <_ZN14CDisplayModule8DigitSetEh+0x142>
 80004da:	2b05      	cmp	r3, #5
 80004dc:	dc0d      	bgt.n	80004fa <_ZN14CDisplayModule8DigitSetEh+0x3a>
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d046      	beq.n	8000570 <_ZN14CDisplayModule8DigitSetEh+0xb0>
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	dc04      	bgt.n	80004f0 <_ZN14CDisplayModule8DigitSetEh+0x30>
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d018      	beq.n	800051c <_ZN14CDisplayModule8DigitSetEh+0x5c>
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d035      	beq.n	800055a <_ZN14CDisplayModule8DigitSetEh+0x9a>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_D_PORT, PIN_DISPLAY_SEG_D_PIN);
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_F_PORT, PIN_DISPLAY_SEG_F_PIN);
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_G_PORT, PIN_DISPLAY_SEG_G_PIN);
		break;
	}
}
 80004ee:	e111      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>

void CDisplayModule::DigitSet(unsigned char u8Digit)
{
	DigitClear();

	switch(u8Digit)
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d057      	beq.n	80005a4 <_ZN14CDisplayModule8DigitSetEh+0xe4>
 80004f4:	2b04      	cmp	r3, #4
 80004f6:	d06e      	beq.n	80005d6 <_ZN14CDisplayModule8DigitSetEh+0x116>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_D_PORT, PIN_DISPLAY_SEG_D_PIN);
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_F_PORT, PIN_DISPLAY_SEG_F_PIN);
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_G_PORT, PIN_DISPLAY_SEG_G_PIN);
		break;
	}
}
 80004f8:	e10c      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>

void CDisplayModule::DigitSet(unsigned char u8Digit)
{
	DigitClear();

	switch(u8Digit)
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	f000 80c7 	beq.w	800068e <_ZN14CDisplayModule8DigitSetEh+0x1ce>
 8000500:	2b08      	cmp	r3, #8
 8000502:	dc06      	bgt.n	8000512 <_ZN14CDisplayModule8DigitSetEh+0x52>
 8000504:	2b06      	cmp	r3, #6
 8000506:	f000 8095 	beq.w	8000634 <_ZN14CDisplayModule8DigitSetEh+0x174>
 800050a:	2b07      	cmp	r3, #7
 800050c:	f000 80b0 	beq.w	8000670 <_ZN14CDisplayModule8DigitSetEh+0x1b0>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_D_PORT, PIN_DISPLAY_SEG_D_PIN);
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_F_PORT, PIN_DISPLAY_SEG_F_PIN);
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_G_PORT, PIN_DISPLAY_SEG_G_PIN);
		break;
	}
}
 8000510:	e100      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>

void CDisplayModule::DigitSet(unsigned char u8Digit)
{
	DigitClear();

	switch(u8Digit)
 8000512:	2b09      	cmp	r3, #9
 8000514:	f000 80df 	beq.w	80006d6 <_ZN14CDisplayModule8DigitSetEh+0x216>
 8000518:	2bff      	cmp	r3, #255	; 0xff
	{
	case DISPLAY_DIGIT_OFF:
		break;
 800051a:	e0fb      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>
	case 0:
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_A_PORT, PIN_DISPLAY_SEG_A_PIN);
 800051c:	2101      	movs	r1, #1
 800051e:	487f      	ldr	r0, [pc, #508]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 8000520:	f7ff ff0c 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_B_PORT, PIN_DISPLAY_SEG_B_PIN);
 8000524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f7ff ff06 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_C_PORT, PIN_DISPLAY_SEG_C_PIN);
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	487b      	ldr	r0, [pc, #492]	; (8000720 <_ZN14CDisplayModule8DigitSetEh+0x260>)
 8000534:	f7ff ff02 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_D_PORT, PIN_DISPLAY_SEG_D_PIN);
 8000538:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053c:	4877      	ldr	r0, [pc, #476]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 800053e:	f7ff fefd 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_E_PORT, PIN_DISPLAY_SEG_E_PIN);
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	4875      	ldr	r0, [pc, #468]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 8000548:	f7ff fef8 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_F_PORT, PIN_DISPLAY_SEG_F_PIN);
 800054c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f7ff fef2 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 8000558:	e0dc      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>
	case 1:
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_B_PORT, PIN_DISPLAY_SEG_B_PIN);
 800055a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f7ff feeb 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_C_PORT, PIN_DISPLAY_SEG_C_PIN);
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	486d      	ldr	r0, [pc, #436]	; (8000720 <_ZN14CDisplayModule8DigitSetEh+0x260>)
 800056a:	f7ff fee7 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 800056e:	e0d1      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>
	case 2:
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_A_PORT, PIN_DISPLAY_SEG_A_PIN);
 8000570:	2101      	movs	r1, #1
 8000572:	486a      	ldr	r0, [pc, #424]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 8000574:	f7ff fee2 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_B_PORT, PIN_DISPLAY_SEG_B_PIN);
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f7ff fedc 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_D_PORT, PIN_DISPLAY_SEG_D_PIN);
 8000584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000588:	4864      	ldr	r0, [pc, #400]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 800058a:	f7ff fed7 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_E_PORT, PIN_DISPLAY_SEG_E_PIN);
 800058e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000592:	4862      	ldr	r0, [pc, #392]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 8000594:	f7ff fed2 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_G_PORT, PIN_DISPLAY_SEG_G_PIN);
 8000598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059c:	485f      	ldr	r0, [pc, #380]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 800059e:	f7ff fecd 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 80005a2:	e0b7      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>
	case 3:
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_A_PORT, PIN_DISPLAY_SEG_A_PIN);
 80005a4:	2101      	movs	r1, #1
 80005a6:	485d      	ldr	r0, [pc, #372]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 80005a8:	f7ff fec8 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_B_PORT, PIN_DISPLAY_SEG_B_PIN);
 80005ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b4:	f7ff fec2 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_C_PORT, PIN_DISPLAY_SEG_C_PIN);
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	4859      	ldr	r0, [pc, #356]	; (8000720 <_ZN14CDisplayModule8DigitSetEh+0x260>)
 80005bc:	f7ff febe 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_D_PORT, PIN_DISPLAY_SEG_D_PIN);
 80005c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c4:	4855      	ldr	r0, [pc, #340]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 80005c6:	f7ff feb9 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_G_PORT, PIN_DISPLAY_SEG_G_PIN);
 80005ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ce:	4853      	ldr	r0, [pc, #332]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 80005d0:	f7ff feb4 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 80005d4:	e09e      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>
	case 4:
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_B_PORT, PIN_DISPLAY_SEG_B_PIN);
 80005d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f7ff fead 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_C_PORT, PIN_DISPLAY_SEG_C_PIN);
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	484e      	ldr	r0, [pc, #312]	; (8000720 <_ZN14CDisplayModule8DigitSetEh+0x260>)
 80005e6:	f7ff fea9 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_F_PORT, PIN_DISPLAY_SEG_F_PIN);
 80005ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f7ff fea3 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_G_PORT, PIN_DISPLAY_SEG_G_PIN);
 80005f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fa:	4848      	ldr	r0, [pc, #288]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 80005fc:	f7ff fe9e 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 8000600:	e088      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>
	case 5:
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_A_PORT, PIN_DISPLAY_SEG_A_PIN);
 8000602:	2101      	movs	r1, #1
 8000604:	4845      	ldr	r0, [pc, #276]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 8000606:	f7ff fe99 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_C_PORT, PIN_DISPLAY_SEG_C_PIN);
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4844      	ldr	r0, [pc, #272]	; (8000720 <_ZN14CDisplayModule8DigitSetEh+0x260>)
 800060e:	f7ff fe95 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_D_PORT, PIN_DISPLAY_SEG_D_PIN);
 8000612:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000616:	4841      	ldr	r0, [pc, #260]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 8000618:	f7ff fe90 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_F_PORT, PIN_DISPLAY_SEG_F_PIN);
 800061c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f7ff fe8a 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_G_PORT, PIN_DISPLAY_SEG_G_PIN);
 8000628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062c:	483b      	ldr	r0, [pc, #236]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 800062e:	f7ff fe85 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 8000632:	e06f      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>
	case 6:
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_A_PORT, PIN_DISPLAY_SEG_A_PIN);
 8000634:	2101      	movs	r1, #1
 8000636:	4839      	ldr	r0, [pc, #228]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 8000638:	f7ff fe80 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_C_PORT, PIN_DISPLAY_SEG_C_PIN);
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	4838      	ldr	r0, [pc, #224]	; (8000720 <_ZN14CDisplayModule8DigitSetEh+0x260>)
 8000640:	f7ff fe7c 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_D_PORT, PIN_DISPLAY_SEG_D_PIN);
 8000644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000648:	4834      	ldr	r0, [pc, #208]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 800064a:	f7ff fe77 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_E_PORT, PIN_DISPLAY_SEG_E_PIN);
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	4832      	ldr	r0, [pc, #200]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 8000654:	f7ff fe72 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_F_PORT, PIN_DISPLAY_SEG_F_PIN);
 8000658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000660:	f7ff fe6c 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_G_PORT, PIN_DISPLAY_SEG_G_PIN);
 8000664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000668:	482c      	ldr	r0, [pc, #176]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 800066a:	f7ff fe67 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 800066e:	e051      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>
	case 7:
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_A_PORT, PIN_DISPLAY_SEG_A_PIN);
 8000670:	2101      	movs	r1, #1
 8000672:	482a      	ldr	r0, [pc, #168]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 8000674:	f7ff fe62 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_B_PORT, PIN_DISPLAY_SEG_B_PIN);
 8000678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f7ff fe5c 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_C_PORT, PIN_DISPLAY_SEG_C_PIN);
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	4826      	ldr	r0, [pc, #152]	; (8000720 <_ZN14CDisplayModule8DigitSetEh+0x260>)
 8000688:	f7ff fe58 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 800068c:	e042      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>
	case 8:
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_A_PORT, PIN_DISPLAY_SEG_A_PIN);
 800068e:	2101      	movs	r1, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 8000692:	f7ff fe53 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_B_PORT, PIN_DISPLAY_SEG_B_PIN);
 8000696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f7ff fe4d 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_C_PORT, PIN_DISPLAY_SEG_C_PIN);
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	481e      	ldr	r0, [pc, #120]	; (8000720 <_ZN14CDisplayModule8DigitSetEh+0x260>)
 80006a6:	f7ff fe49 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_D_PORT, PIN_DISPLAY_SEG_D_PIN);
 80006aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ae:	481b      	ldr	r0, [pc, #108]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 80006b0:	f7ff fe44 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_E_PORT, PIN_DISPLAY_SEG_E_PIN);
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	4818      	ldr	r0, [pc, #96]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 80006ba:	f7ff fe3f 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_F_PORT, PIN_DISPLAY_SEG_F_PIN);
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f7ff fe39 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_G_PORT, PIN_DISPLAY_SEG_G_PIN);
 80006ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 80006d0:	f7ff fe34 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 80006d4:	e01e      	b.n	8000714 <_ZN14CDisplayModule8DigitSetEh+0x254>
	case 9:
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_A_PORT, PIN_DISPLAY_SEG_A_PIN);
 80006d6:	2101      	movs	r1, #1
 80006d8:	4810      	ldr	r0, [pc, #64]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 80006da:	f7ff fe2f 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_B_PORT, PIN_DISPLAY_SEG_B_PIN);
 80006de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f7ff fe29 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_C_PORT, PIN_DISPLAY_SEG_C_PIN);
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <_ZN14CDisplayModule8DigitSetEh+0x260>)
 80006ee:	f7ff fe25 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_D_PORT, PIN_DISPLAY_SEG_D_PIN);
 80006f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f6:	4809      	ldr	r0, [pc, #36]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 80006f8:	f7ff fe20 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_F_PORT, PIN_DISPLAY_SEG_F_PIN);
 80006fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000704:	f7ff fe1a 	bl	800033c <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(PIN_DISPLAY_SEG_G_PORT, PIN_DISPLAY_SEG_G_PIN);
 8000708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <_ZN14CDisplayModule8DigitSetEh+0x25c>)
 800070e:	f7ff fe15 	bl	800033c <LL_GPIO_ResetOutputPin>
		break;
 8000712:	bf00      	nop
	}
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	48000400 	.word	0x48000400
 8000720:	48000800 	.word	0x48000800

08000724 <_ZN14CDisplayModule10DigitClearEv>:

void CDisplayModule::DigitClear(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	LL_GPIO_SetOutputPin(PIN_DISPLAY_SEG_A_PORT, PIN_DISPLAY_SEG_A_PIN);
 800072c:	2101      	movs	r1, #1
 800072e:	4813      	ldr	r0, [pc, #76]	; (800077c <_ZN14CDisplayModule10DigitClearEv+0x58>)
 8000730:	f7ff fdf6 	bl	8000320 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(PIN_DISPLAY_SEG_B_PORT, PIN_DISPLAY_SEG_B_PIN);
 8000734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f7ff fdf0 	bl	8000320 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(PIN_DISPLAY_SEG_C_PORT, PIN_DISPLAY_SEG_C_PIN);
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	480f      	ldr	r0, [pc, #60]	; (8000780 <_ZN14CDisplayModule10DigitClearEv+0x5c>)
 8000744:	f7ff fdec 	bl	8000320 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(PIN_DISPLAY_SEG_D_PORT, PIN_DISPLAY_SEG_D_PIN);
 8000748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800074c:	480b      	ldr	r0, [pc, #44]	; (800077c <_ZN14CDisplayModule10DigitClearEv+0x58>)
 800074e:	f7ff fde7 	bl	8000320 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(PIN_DISPLAY_SEG_E_PORT, PIN_DISPLAY_SEG_E_PIN);
 8000752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <_ZN14CDisplayModule10DigitClearEv+0x58>)
 8000758:	f7ff fde2 	bl	8000320 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(PIN_DISPLAY_SEG_F_PORT, PIN_DISPLAY_SEG_F_PIN);
 800075c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f7ff fddc 	bl	8000320 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(PIN_DISPLAY_SEG_G_PORT, PIN_DISPLAY_SEG_G_PIN);
 8000768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <_ZN14CDisplayModule10DigitClearEv+0x58>)
 800076e:	f7ff fdd7 	bl	8000320 <LL_GPIO_SetOutputPin>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	48000400 	.word	0x48000400
 8000780:	48000800 	.word	0x48000800

08000784 <_ZN12CTimerModule4InitEv>:
#include "main.hpp"

void CTimerModule::Init(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <_ZN12CTimerModule6HandleEv>:

void CTimerModule::Handle(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	// Display current timer value
	Display.PrintDec(u32TimerValue);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	4821      	ldr	r0, [pc, #132]	; (800082c <_ZN12CTimerModule6HandleEv+0x94>)
 80007a8:	f7ff fe10 	bl	80003cc <_ZN14CDisplayModule8PrintDecEj>
	// Beep on special values
	switch(u32TimerValue)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b3c      	cmp	r3, #60	; 0x3c
 80007b2:	d019      	beq.n	80007e8 <_ZN12CTimerModule6HandleEv+0x50>
 80007b4:	2b3c      	cmp	r3, #60	; 0x3c
 80007b6:	d804      	bhi.n	80007c2 <_ZN12CTimerModule6HandleEv+0x2a>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d01f      	beq.n	80007fc <_ZN12CTimerModule6HandleEv+0x64>
 80007bc:	2b1e      	cmp	r3, #30
 80007be:	d018      	beq.n	80007f2 <_ZN12CTimerModule6HandleEv+0x5a>
 80007c0:	e027      	b.n	8000812 <_ZN12CTimerModule6HandleEv+0x7a>
 80007c2:	2b78      	cmp	r3, #120	; 0x78
 80007c4:	d006      	beq.n	80007d4 <_ZN12CTimerModule6HandleEv+0x3c>
 80007c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d01f      	beq.n	800080e <_ZN12CTimerModule6HandleEv+0x76>
 80007ce:	2b5a      	cmp	r3, #90	; 0x5a
 80007d0:	d005      	beq.n	80007de <_ZN12CTimerModule6HandleEv+0x46>
 80007d2:	e01e      	b.n	8000812 <_ZN12CTimerModule6HandleEv+0x7a>
	{
	case 120:
		Buzzer.BeepShort(1);
 80007d4:	2101      	movs	r1, #1
 80007d6:	4816      	ldr	r0, [pc, #88]	; (8000830 <_ZN12CTimerModule6HandleEv+0x98>)
 80007d8:	f7ff fd7c 	bl	80002d4 <_ZN13CBuzzerModule9BeepShortEj>
		break;
 80007dc:	e019      	b.n	8000812 <_ZN12CTimerModule6HandleEv+0x7a>
	case 90:
		Buzzer.BeepShort(2);
 80007de:	2102      	movs	r1, #2
 80007e0:	4813      	ldr	r0, [pc, #76]	; (8000830 <_ZN12CTimerModule6HandleEv+0x98>)
 80007e2:	f7ff fd77 	bl	80002d4 <_ZN13CBuzzerModule9BeepShortEj>
		break;
 80007e6:	e014      	b.n	8000812 <_ZN12CTimerModule6HandleEv+0x7a>
	case 60:
		Buzzer.BeepShort(3);
 80007e8:	2103      	movs	r1, #3
 80007ea:	4811      	ldr	r0, [pc, #68]	; (8000830 <_ZN12CTimerModule6HandleEv+0x98>)
 80007ec:	f7ff fd72 	bl	80002d4 <_ZN13CBuzzerModule9BeepShortEj>
		break;
 80007f0:	e00f      	b.n	8000812 <_ZN12CTimerModule6HandleEv+0x7a>
	case 30:
		Buzzer.BeepShort(4);
 80007f2:	2104      	movs	r1, #4
 80007f4:	480e      	ldr	r0, [pc, #56]	; (8000830 <_ZN12CTimerModule6HandleEv+0x98>)
 80007f6:	f7ff fd6d 	bl	80002d4 <_ZN13CBuzzerModule9BeepShortEj>
		break;
 80007fa:	e00a      	b.n	8000812 <_ZN12CTimerModule6HandleEv+0x7a>
	case 0:
	   Buzzer.BeepLong(1);
 80007fc:	2101      	movs	r1, #1
 80007fe:	480c      	ldr	r0, [pc, #48]	; (8000830 <_ZN12CTimerModule6HandleEv+0x98>)
 8000800:	f7ff fd7a 	bl	80002f8 <_ZN13CBuzzerModule8BeepLongEj>
		// Exception to wait one more second before shutdown
		u32TimerValue = 10000;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f242 7210 	movw	r2, #10000	; 0x2710
 800080a:	601a      	str	r2, [r3, #0]
		return;
 800080c:	e00a      	b.n	8000824 <_ZN12CTimerModule6HandleEv+0x8c>
	case 10000:
		EnterShutdownMode();
 800080e:	f000 fd31 	bl	8001274 <_Z17EnterShutdownModev>
	}

	// Decrement
	if(u32TimerValue)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <_ZN12CTimerModule6HandleEv+0x8c>
		u32TimerValue--;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1e5a      	subs	r2, r3, #1
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	601a      	str	r2, [r3, #0]
}
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000001c 	.word	0x2000001c
 8000830:	20000024 	.word	0x20000024

08000834 <_ZN12CTimerModule6ReloadEv>:

void CTimerModule::Reload(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	u32TimerValue = TIMER_RELOAD_VALUE;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2278      	movs	r2, #120	; 0x78
 8000840:	601a      	str	r2, [r3, #0]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop

08000850 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	fa93 f3a3 	rbit	r3, r3
 800086a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	fab3 f383 	clz	r3, r3
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	2103      	movs	r1, #3
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	401a      	ands	r2, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	fa93 f3a3 	rbit	r3, r3
 8000888:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	fab3 f383 	clz	r3, r3
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	fa01 f303 	lsl.w	r3, r1, r3
 8000898:	431a      	orrs	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	601a      	str	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	43db      	mvns	r3, r3
 80008c0:	401a      	ands	r2, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	fb01 f303 	mul.w	r3, r1, r3
 80008ca:	431a      	orrs	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	605a      	str	r2, [r3, #4]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80008dc:	b480      	push	{r7}
 80008de:	b089      	sub	sp, #36	; 0x24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	fa93 f3a3 	rbit	r3, r3
 80008f6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	fab3 f383 	clz	r3, r3
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2103      	movs	r1, #3
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	401a      	ands	r2, r3
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	fa93 f3a3 	rbit	r3, r3
 8000914:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	fab3 f383 	clz	r3, r3
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	fa01 f303 	lsl.w	r3, r1, r3
 8000924:	431a      	orrs	r2, r3
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800092a:	bf00      	nop
 800092c:	3724      	adds	r7, #36	; 0x24
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	fa93 f3a3 	rbit	r3, r3
 8000952:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	fab3 f383 	clz	r3, r3
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	2103      	movs	r1, #3
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	401a      	ands	r2, r3
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	fa93 f3a3 	rbit	r3, r3
 8000970:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	fab3 f383 	clz	r3, r3
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	431a      	orrs	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	60da      	str	r2, [r3, #12]
}
 8000986:	bf00      	nop
 8000988:	3724      	adds	r7, #36	; 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	6a1a      	ldr	r2, [r3, #32]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	fa93 f3a3 	rbit	r3, r3
 80009ae:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	fab3 f383 	clz	r3, r3
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	210f      	movs	r1, #15
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	401a      	ands	r2, r3
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	fa93 f3a3 	rbit	r3, r3
 80009cc:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	fab3 f383 	clz	r3, r3
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	fa01 f303 	lsl.w	r3, r1, r3
 80009dc:	431a      	orrs	r2, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80009e2:	bf00      	nop
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	61fb      	str	r3, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	fa93 f3a3 	rbit	r3, r3
 8000a0c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	fab3 f383 	clz	r3, r3
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	210f      	movs	r1, #15
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	401a      	ands	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	0a1b      	lsrs	r3, r3, #8
 8000a24:	61bb      	str	r3, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	fa93 f3a3 	rbit	r3, r3
 8000a2c:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	fab3 f383 	clz	r3, r3
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000a42:	bf00      	nop
 8000a44:	3724      	adds	r7, #36	; 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	fa93 f3a3 	rbit	r3, r3
 8000a6e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	fab3 f383 	clz	r3, r3
 8000a76:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000a78:	e048      	b.n	8000b0c <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	2101      	movs	r1, #1
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	4013      	ands	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d03a      	beq.n	8000b06 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	461a      	mov	r2, r3
 8000a96:	69b9      	ldr	r1, [r7, #24]
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fed9 	bl	8000850 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d003      	beq.n	8000aae <LL_GPIO_Init+0x5e>
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d106      	bne.n	8000abc <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	69b9      	ldr	r1, [r7, #24]
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ff10 	bl	80008dc <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	691b      	ldr	r3, [r3, #16]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	69b9      	ldr	r1, [r7, #24]
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff37 	bl	8000938 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d119      	bne.n	8000b06 <LL_GPIO_Init+0xb6>
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	fa93 f3a3 	rbit	r3, r3
 8000adc:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ade:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000ae0:	fab3 f383 	clz	r3, r3
 8000ae4:	2b07      	cmp	r3, #7
 8000ae6:	d807      	bhi.n	8000af8 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	461a      	mov	r2, r3
 8000aee:	69b9      	ldr	r1, [r7, #24]
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff4f 	bl	8000994 <LL_GPIO_SetAFPin_0_7>
 8000af6:	e006      	b.n	8000b06 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	461a      	mov	r2, r3
 8000afe:	69b9      	ldr	r1, [r7, #24]
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff75 	bl	80009f0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	fa22 f303 	lsr.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1af      	bne.n	8000a7a <LL_GPIO_Init+0x2a>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d003      	beq.n	8000b2a <LL_GPIO_Init+0xda>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d107      	bne.n	8000b3a <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	6819      	ldr	r1, [r3, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	461a      	mov	r2, r3
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff feb9 	bl	80008ac <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b4e:	4909      	ldr	r1, [pc, #36]	; (8000b74 <NVIC_EnableIRQ+0x30>)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	095b      	lsrs	r3, r3, #5
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	f002 021f 	and.w	r2, r2, #31
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	da0b      	bge.n	8000ba4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <NVIC_SetPriority+0x4c>)
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 030f 	and.w	r3, r3, #15
 8000b94:	3b04      	subs	r3, #4
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba2:	e009      	b.n	8000bb8 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <NVIC_SetPriority+0x50>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ffc2 	bl	8000b78 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c18:	4908      	ldr	r1, [pc, #32]	; (8000c3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000

08000c40 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c48:	4908      	ldr	r1, [pc, #32]	; (8000c6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40021000 	.word	0x40021000

08000c70 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c78:	4908      	ldr	r1, [pc, #32]	; (8000c9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ca8:	4905      	ldr	r1, [pc, #20]	; (8000cc0 <LL_EXTI_EnableIT_0_31+0x20>)
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <LL_EXTI_EnableIT_0_31+0x20>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	600b      	str	r3, [r1, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000ccc:	4905      	ldr	r1, [pc, #20]	; (8000ce4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	608b      	str	r3, [r1, #8]

}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000cf0:	4905      	ldr	r1, [pc, #20]	; (8000d08 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60cb      	str	r3, [r1, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	40010400 	.word	0x40010400

08000d0c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6153      	str	r3, [r2, #20]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40010400 	.word	0x40010400

08000d2c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f043 0201 	orr.w	r2, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f023 0208 	bic.w	r2, r3, #8
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	601a      	str	r2, [r3, #0]
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	f043 0201 	orr.w	r2, r3, #1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	60da      	str	r2, [r3, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	f043 0201 	orr.w	r2, r3, #1
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	615a      	str	r2, [r3, #20]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_Z16Init_SystemClockv>:
#include "main.hpp"

#define VECT_TAB_OFFSET  0x00

void Init_SystemClock(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <_Z16Init_SystemClockv+0x64>)
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <_Z16Init_SystemClockv+0x64>)
 8000df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <_Z16Init_SystemClockv+0x68>)
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <_Z16Init_SystemClockv+0x68>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_Z16Init_SystemClockv+0x68>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <_Z16Init_SystemClockv+0x68>)
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <_Z16Init_SystemClockv+0x68>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <_Z16Init_SystemClockv+0x68>)
 8000e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <_Z16Init_SystemClockv+0x68>)
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <_Z16Init_SystemClockv+0x68>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_Z16Init_SystemClockv+0x68>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <_Z16Init_SystemClockv+0x64>)
 8000e3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e42:	609a      	str	r2, [r3, #8]

}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	40021000 	.word	0x40021000

08000e58 <_Z16Init_PeriphClockv>:

void Init_PeriphClock(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
   LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e5c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000e60:	f7ff feee 	bl	8000c40 <LL_APB1_GRP1_EnableClock>
   LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff ff03 	bl	8000c70 <LL_APB2_GRP1_EnableClock>

   LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff fed0 	bl	8000c10 <LL_AHB2_GRP1_EnableClock>
   LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f7ff fecd 	bl	8000c10 <LL_AHB2_GRP1_EnableClock>
   LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000e76:	2004      	movs	r0, #4
 8000e78:	f7ff feca 	bl	8000c10 <LL_AHB2_GRP1_EnableClock>
   LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000e7c:	2008      	movs	r0, #8
 8000e7e:	f7ff fec7 	bl	8000c10 <LL_AHB2_GRP1_EnableClock>
   LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000e82:	2080      	movs	r0, #128	; 0x80
 8000e84:	f7ff fec4 	bl	8000c10 <LL_AHB2_GRP1_EnableClock>

   LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);	// BUZZER
 8000e88:	2010      	movs	r0, #16
 8000e8a:	f7ff fed9 	bl	8000c40 <LL_APB1_GRP1_EnableClock>
   LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);	// DISPLAY
 8000e8e:	2020      	movs	r0, #32
 8000e90:	f7ff fed6 	bl	8000c40 <LL_APB1_GRP1_EnableClock>
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_Z9Init_GPIOv>:

void Init_GPIO(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
   LL_GPIO_InitTypeDef GPIO_InitStruct;
   GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pin = LL_GPIO_PIN_ALL;
 8000eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eae:	603b      	str	r3, [r7, #0]

	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4840      	ldr	r0, [pc, #256]	; (8000fb8 <_Z9Init_GPIOv+0x120>)
 8000eb6:	f7ff fdcb 	bl	8000a50 <LL_GPIO_Init>
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	483f      	ldr	r0, [pc, #252]	; (8000fbc <_Z9Init_GPIOv+0x124>)
 8000ec0:	f7ff fdc6 	bl	8000a50 <LL_GPIO_Init>
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	483d      	ldr	r0, [pc, #244]	; (8000fc0 <_Z9Init_GPIOv+0x128>)
 8000eca:	f7ff fdc1 	bl	8000a50 <LL_GPIO_Init>
	LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	483c      	ldr	r0, [pc, #240]	; (8000fc4 <_Z9Init_GPIOv+0x12c>)
 8000ed4:	f7ff fdbc 	bl	8000a50 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_ALL & ~(LL_GPIO_PIN_13 | LL_GPIO_PIN_14);
 8000ed8:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8000edc:	603b      	str	r3, [r7, #0]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f7ff fdb3 	bl	8000a50 <LL_GPIO_Init>

   // Display
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eea:	2301      	movs	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]

   GPIO_InitStruct.Pin     = PIN_DISPLAY_SEG_A_PIN;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	603b      	str	r3, [r7, #0]
   LL_GPIO_Init(PIN_DISPLAY_SEG_A_PORT, &GPIO_InitStruct);
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	482f      	ldr	r0, [pc, #188]	; (8000fb8 <_Z9Init_GPIOv+0x120>)
 8000efc:	f7ff fda8 	bl	8000a50 <LL_GPIO_Init>
   GPIO_InitStruct.Pin     = PIN_DISPLAY_SEG_B_PIN;
 8000f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f04:	603b      	str	r3, [r7, #0]
   LL_GPIO_Init(PIN_DISPLAY_SEG_B_PORT, &GPIO_InitStruct);
 8000f06:	463b      	mov	r3, r7
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f7ff fd9f 	bl	8000a50 <LL_GPIO_Init>
   GPIO_InitStruct.Pin     = PIN_DISPLAY_SEG_C_PIN;
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	603b      	str	r3, [r7, #0]
   LL_GPIO_Init(PIN_DISPLAY_SEG_C_PORT, &GPIO_InitStruct);
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4828      	ldr	r0, [pc, #160]	; (8000fbc <_Z9Init_GPIOv+0x124>)
 8000f1c:	f7ff fd98 	bl	8000a50 <LL_GPIO_Init>
   GPIO_InitStruct.Pin     = PIN_DISPLAY_SEG_D_PIN;
 8000f20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f24:	603b      	str	r3, [r7, #0]
   LL_GPIO_Init(PIN_DISPLAY_SEG_D_PORT, &GPIO_InitStruct);
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4823      	ldr	r0, [pc, #140]	; (8000fb8 <_Z9Init_GPIOv+0x120>)
 8000f2c:	f7ff fd90 	bl	8000a50 <LL_GPIO_Init>
   GPIO_InitStruct.Pin     = PIN_DISPLAY_SEG_E_PIN;
 8000f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f34:	603b      	str	r3, [r7, #0]
   LL_GPIO_Init(PIN_DISPLAY_SEG_E_PORT, &GPIO_InitStruct);
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481f      	ldr	r0, [pc, #124]	; (8000fb8 <_Z9Init_GPIOv+0x120>)
 8000f3c:	f7ff fd88 	bl	8000a50 <LL_GPIO_Init>
   GPIO_InitStruct.Pin     = PIN_DISPLAY_SEG_F_PIN;
 8000f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f44:	603b      	str	r3, [r7, #0]
   LL_GPIO_Init(PIN_DISPLAY_SEG_F_PORT, &GPIO_InitStruct);
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f7ff fd7f 	bl	8000a50 <LL_GPIO_Init>
   GPIO_InitStruct.Pin     = PIN_DISPLAY_SEG_G_PIN;
 8000f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f56:	603b      	str	r3, [r7, #0]
   LL_GPIO_Init(PIN_DISPLAY_SEG_G_PORT, &GPIO_InitStruct);
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <_Z9Init_GPIOv+0x120>)
 8000f5e:	f7ff fd77 	bl	8000a50 <LL_GPIO_Init>

	GPIO_InitStruct.Pin     = PIN_DISPLAY_DIG_0_PIN;
 8000f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f66:	603b      	str	r3, [r7, #0]
	LL_GPIO_Init(PIN_DISPLAY_DIG_0_PORT, &GPIO_InitStruct);
 8000f68:	463b      	mov	r3, r7
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <_Z9Init_GPIOv+0x124>)
 8000f6e:	f7ff fd6f 	bl	8000a50 <LL_GPIO_Init>
	GPIO_InitStruct.Pin     = PIN_DISPLAY_DIG_1_PIN;
 8000f72:	2304      	movs	r3, #4
 8000f74:	603b      	str	r3, [r7, #0]
	LL_GPIO_Init(PIN_DISPLAY_DIG_1_PORT, &GPIO_InitStruct);
 8000f76:	463b      	mov	r3, r7
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <_Z9Init_GPIOv+0x120>)
 8000f7c:	f7ff fd68 	bl	8000a50 <LL_GPIO_Init>
	GPIO_InitStruct.Pin     = PIN_DISPLAY_DIG_2_PIN;
 8000f80:	2310      	movs	r3, #16
 8000f82:	603b      	str	r3, [r7, #0]
	LL_GPIO_Init(PIN_DISPLAY_DIG_2_PORT, &GPIO_InitStruct);
 8000f84:	463b      	mov	r3, r7
 8000f86:	4619      	mov	r1, r3
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <_Z9Init_GPIOv+0x124>)
 8000f8a:	f7ff fd61 	bl	8000a50 <LL_GPIO_Init>

	// Buzzer
	GPIO_InitStruct.Pin     = PIN_BUZZER_VCC_PIN;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	603b      	str	r3, [r7, #0]
	LL_GPIO_Init(PIN_BUZZER_VCC_PORT, &GPIO_InitStruct);
 8000f92:	463b      	mov	r3, r7
 8000f94:	4619      	mov	r1, r3
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <_Z9Init_GPIOv+0x124>)
 8000f98:	f7ff fd5a 	bl	8000a50 <LL_GPIO_Init>

	// Button
	GPIO_InitStruct.Mode    = LL_GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pin     = PIN_BUTTON_PIN;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	603b      	str	r3, [r7, #0]
	LL_GPIO_Init(PIN_BUTTON_PORT, &GPIO_InitStruct);
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fac:	f7ff fd50 	bl	8000a50 <LL_GPIO_Init>
}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000c00 	.word	0x48000c00
 8000fc4:	48001c00 	.word	0x48001c00

08000fc8 <_Z11Init_Timersv>:

void Init_Timers(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	// 1 tick/1 s
	SysTick_Config(CPU_CLOCK_FREQUENCY);
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <_Z11Init_Timersv+0x40>)
 8000fce:	f7ff fdfd 	bl	8000bcc <SysTick_Config>

	// Buzzer Timer
	LL_TIM_SetPrescaler(TIM6, CPU_CLOCK_FREQUENCY/1000);
 8000fd2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <_Z11Init_Timersv+0x44>)
 8000fd8:	f7ff fecc 	bl	8000d74 <LL_TIM_SetPrescaler>
	LL_TIM_SetOnePulseMode(TIM6, 1);
 8000fdc:	2101      	movs	r1, #1
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <_Z11Init_Timersv+0x44>)
 8000fe0:	f7ff feb4 	bl	8000d4c <LL_TIM_SetOnePulseMode>
	LL_TIM_GenerateEvent_UPDATE(TIM6);
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <_Z11Init_Timersv+0x44>)
 8000fe6:	f7ff fef1 	bl	8000dcc <LL_TIM_GenerateEvent_UPDATE>

	// Display Timer
	LL_TIM_SetOnePulseMode(TIM7, LL_TIM_ONEPULSEMODE_REPETITIVE);
 8000fea:	2100      	movs	r1, #0
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <_Z11Init_Timersv+0x48>)
 8000fee:	f7ff fead 	bl	8000d4c <LL_TIM_SetOnePulseMode>
	LL_TIM_SetAutoReload(TIM7, CPU_CLOCK_FREQUENCY / (DISPLAY_DIGIT_COUNT * DISPLAY_REFRESH_RATE));
 8000ff2:	f646 012a 	movw	r1, #26666	; 0x682a
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <_Z11Init_Timersv+0x48>)
 8000ff8:	f7ff feca 	bl	8000d90 <LL_TIM_SetAutoReload>
	LL_TIM_EnableCounter(TIM7);
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <_Z11Init_Timersv+0x48>)
 8000ffe:	f7ff fe95 	bl	8000d2c <LL_TIM_EnableCounter>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	003d0900 	.word	0x003d0900
 800100c:	40001000 	.word	0x40001000
 8001010:	40001400 	.word	0x40001400

08001014 <_Z15Init_Interruptsv>:

void Init_Interrupts(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
   // TIM6 Update (Buzzer)
	LL_TIM_EnableIT_UPDATE(TIM6);
 8001018:	480e      	ldr	r0, [pc, #56]	; (8001054 <_Z15Init_Interruptsv+0x40>)
 800101a:	f7ff fec7 	bl	8000dac <LL_TIM_EnableIT_UPDATE>
   NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800101e:	2036      	movs	r0, #54	; 0x36
 8001020:	f7ff fd90 	bl	8000b44 <NVIC_EnableIRQ>

   // TIM7 Update (Display)
	LL_TIM_EnableIT_UPDATE(TIM7);
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <_Z15Init_Interruptsv+0x44>)
 8001026:	f7ff fec1 	bl	8000dac <LL_TIM_EnableIT_UPDATE>
   NVIC_EnableIRQ(TIM7_IRQn);
 800102a:	2037      	movs	r0, #55	; 0x37
 800102c:	f7ff fd8a 	bl	8000b44 <NVIC_EnableIRQ>

   // Button
   LL_EXTI_EnableRisingTrig_0_31(LL_EXTI_LINE_0);
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fe47 	bl	8000cc4 <LL_EXTI_EnableRisingTrig_0_31>
   LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_0);
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff fe56 	bl	8000ce8 <LL_EXTI_EnableFallingTrig_0_31>
   LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fe65 	bl	8000d0c <LL_EXTI_ClearFlag_0_31>
   LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_0);
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff fe2c 	bl	8000ca0 <LL_EXTI_EnableIT_0_31>
   NVIC_EnableIRQ(EXTI0_IRQn);
 8001048:	2006      	movs	r0, #6
 800104a:	f7ff fd7b 	bl	8000b44 <NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40001000 	.word	0x40001000
 8001058:	40001400 	.word	0x40001400

0800105c <_Z13Init_Hardwarev>:

void Init_Hardware(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
   Init_SystemClock();
 8001060:	f7ff fec4 	bl	8000dec <_Z16Init_SystemClockv>
	//SystemInit();
   Init_PeriphClock();
 8001064:	f7ff fef8 	bl	8000e58 <_Z16Init_PeriphClockv>
	Init_GPIO();
 8001068:	f7ff ff16 	bl	8000e98 <_Z9Init_GPIOv>
   Init_Timers();
 800106c:	f7ff ffac 	bl	8000fc8 <_Z11Init_Timersv>
   Init_Interrupts();
 8001070:	f7ff ffd0 	bl	8001014 <_Z15Init_Interruptsv>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6153      	str	r3, [r2, #20]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40010400 	.word	0x40010400

08001098 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	401a      	ands	r2, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f06f 0201 	mvn.w	r2, #1
 80010d2:	611a      	str	r2, [r3, #16]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_Z19TIM6_DAC_IRQHandlerv>:
extern void *_sidata, *_sdata, *_edata, *_sbss, *_ebss, *_estack;
//void __libc_init_array(void);
void Reset_Handler(void);

void TIM6_DAC_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	LL_TIM_ClearFlag_UPDATE(TIM6);
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <_Z19TIM6_DAC_IRQHandlerv+0x14>)
 80010e6:	f7ff ffed 	bl	80010c4 <LL_TIM_ClearFlag_UPDATE>
	Buzzer.Handle();
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z19TIM6_DAC_IRQHandlerv+0x18>)
 80010ec:	f7ff f8b4 	bl	8000258 <_ZN13CBuzzerModule6HandleEv>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40001000 	.word	0x40001000
 80010f8:	20000024 	.word	0x20000024

080010fc <_Z15TIM7_IRQHandlerv>:

void TIM7_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	LL_TIM_ClearFlag_UPDATE(TIM7);
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <_Z15TIM7_IRQHandlerv+0x14>)
 8001102:	f7ff ffdf 	bl	80010c4 <LL_TIM_ClearFlag_UPDATE>
	Display.Handle();
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <_Z15TIM7_IRQHandlerv+0x18>)
 8001108:	f7ff f938 	bl	800037c <_ZN14CDisplayModule6HandleEv>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40001400 	.word	0x40001400
 8001114:	2000001c 	.word	0x2000001c

08001118 <_Z15SysTick_Handlerv>:

void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	Timer.Handle();
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <_Z15SysTick_Handlerv+0x10>)
 800111e:	f7ff fb3b 	bl	8000798 <_ZN12CTimerModule6HandleEv>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000030 	.word	0x20000030

0800112c <_Z16EXTI0_IRQHandlerv>:

void EXTI0_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff ffa1 	bl	8001078 <LL_EXTI_ClearFlag_0_31>
	ButtonState = !LL_GPIO_IsInputPinSet(PIN_BUTTON_PORT, PIN_BUTTON_PIN);
 8001136:	2101      	movs	r1, #1
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f7ff ffac 	bl	8001098 <LL_GPIO_IsInputPinSet>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf0c      	ite	eq
 8001146:	2301      	moveq	r3, #1
 8001148:	2300      	movne	r3, #0
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b01      	ldr	r3, [pc, #4]	; (8001154 <_Z16EXTI0_IRQHandlerv+0x28>)
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000034 	.word	0x20000034

08001158 <_Z15Default_Handlerv>:

void Default_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	while(1);
 800115c:	e7fe      	b.n	800115c <_Z15Default_Handlerv+0x4>
 800115e:	bf00      	nop

08001160 <_Z13Reset_Handlerv>:
};


//void __attribute__((naked, noreturn)) Reset_Handler()
void Reset_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
   SCB->VTOR = (uint32_t)&g_pfnVectors;
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_Z13Reset_Handlerv+0x5c>)
 8001168:	4a15      	ldr	r2, [pc, #84]	; (80011c0 <_Z13Reset_Handlerv+0x60>)
 800116a:	609a      	str	r2, [r3, #8]
   //Normally the CPU will setup the based on the value from the first entry in the vector table.
   //If you encounter problems with accessing stack variables during initialization, ensure
   asm ("ldr sp, =_estack");
 800116c:	f8df d068 	ldr.w	sp, [pc, #104]	; 80011d8 <_Z13Reset_Handlerv+0x78>

   void **pSource, **pDest;

   // Copy the data segment initializers from flash to SRAM
   for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <_Z13Reset_Handlerv+0x64>)
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <_Z13Reset_Handlerv+0x68>)
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_Z13Reset_Handlerv+0x6c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d00a      	beq.n	8001196 <_Z13Reset_Handlerv+0x36>
   	*pDest = *pSource;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	601a      	str	r2, [r3, #0]
   asm ("ldr sp, =_estack");

   void **pSource, **pDest;

   // Copy the data segment initializers from flash to SRAM
   for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3304      	adds	r3, #4
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3304      	adds	r3, #4
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	e7f0      	b.n	8001178 <_Z13Reset_Handlerv+0x18>
   	*pDest = *pSource;

   // Zero fill the bss segment
   for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <_Z13Reset_Handlerv+0x70>)
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <_Z13Reset_Handlerv+0x74>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d006      	beq.n	80011b0 <_Z13Reset_Handlerv+0x50>
   	*pDest = 0;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
   // Copy the data segment initializers from flash to SRAM
   for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
   	*pDest = *pSource;

   // Zero fill the bss segment
   for (pDest = &_sbss; pDest != &_ebss; pDest++)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3304      	adds	r3, #4
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	e7f4      	b.n	800119a <_Z13Reset_Handlerv+0x3a>
   	*pDest = 0;

   //__libc_init_array();

   main();
 80011b0:	f000 f838 	bl	8001224 <main>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	e000ed00 	.word	0xe000ed00
 80011c0:	08000000 	.word	0x08000000
 80011c4:	080012dc 	.word	0x080012dc
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000038 	.word	0x20000038
 80011d8:	20018000 	.word	0x20018000

080011dc <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011e0:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <LL_LPM_EnableDeepSleep+0x1c>)
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <LL_LPM_EnableDeepSleep+0x1c>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6113      	str	r3, [r2, #16]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001204:	4906      	ldr	r1, [pc, #24]	; (8001220 <LL_PWR_SetPowerMode+0x24>)
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <LL_PWR_SetPowerMode+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 0207 	bic.w	r2, r3, #7
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40007000 	.word	0x40007000

08001224 <main>:
CBuzzerModule		Buzzer;
CTimerModule		Timer;
bool					ButtonState;

int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
   Init_Hardware();
 8001228:	f7ff ff18 	bl	800105c <_Z13Init_Hardwarev>

   Display.Init();
 800122c:	480e      	ldr	r0, [pc, #56]	; (8001268 <main+0x44>)
 800122e:	f7ff f893 	bl	8000358 <_ZN14CDisplayModule4InitEv>
	Timer.Init();
 8001232:	480e      	ldr	r0, [pc, #56]	; (800126c <main+0x48>)
 8001234:	f7ff faa6 	bl	8000784 <_ZN12CTimerModule4InitEv>
   Timer.Reload();
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <main+0x48>)
 800123a:	f7ff fafb 	bl	8000834 <_ZN12CTimerModule6ReloadEv>
   Timer.Handle();
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <main+0x48>)
 8001240:	f7ff faaa 	bl	8000798 <_ZN12CTimerModule6HandleEv>

   ButtonState = false;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <main+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]

   /* Infinite loop */
   while (ButtonState == false);
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <main+0x4c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d100      	bne.n	8001254 <main+0x30>
 8001252:	e7fa      	b.n	800124a <main+0x26>
   while (ButtonState == true);
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <main+0x4c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d000      	beq.n	800125e <main+0x3a>
 800125c:	e7fa      	b.n	8001254 <main+0x30>

   EnterShutdownMode();
 800125e:	f000 f809 	bl	8001274 <_Z17EnterShutdownModev>
}
 8001262:	2300      	movs	r3, #0
 8001264:	4618      	mov	r0, r3
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000001c 	.word	0x2000001c
 800126c:	20000030 	.word	0x20000030
 8001270:	20000034 	.word	0x20000034

08001274 <_Z17EnterShutdownModev>:

void EnterShutdownMode(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	// Disable internal wakeup line
	PWR->CR3 &= ~PWR_CR3_EIWF;
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <_Z17EnterShutdownModev+0x44>)
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <_Z17EnterShutdownModev+0x44>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001282:	6093      	str	r3, [r2, #8]

  	// Clear all wake up Flags
  	PWR->SCR |= PWR_SCR_CWUF;
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <_Z17EnterShutdownModev+0x44>)
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <_Z17EnterShutdownModev+0x44>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f043 031f 	orr.w	r3, r3, #31
 800128e:	6193      	str	r3, [r2, #24]

  	// Select wakeup pin polarity (0: rising, 1: falling)
  	PWR->CR4 |= PWR_CR4_WP1;
 8001290:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <_Z17EnterShutdownModev+0x44>)
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <_Z17EnterShutdownModev+0x44>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	60d3      	str	r3, [r2, #12]
  	//PWR->CR4 &= PWR_CR4_WP1;
  	// Enable wakeup pin WKUP1 (PA0)
  	PWR->CR3 |= LL_PWR_WAKEUP_PIN1;
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <_Z17EnterShutdownModev+0x44>)
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <_Z17EnterShutdownModev+0x44>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6093      	str	r3, [r2, #8]

  	// Set SHUTDOWN mode when CPU enters deepsleep
  	LL_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80012a8:	2004      	movs	r0, #4
 80012aa:	f7ff ffa7 	bl	80011fc <LL_PWR_SetPowerMode>

  	// Set SLEEPDEEP bit of Cortex System Control Register
  	LL_LPM_EnableDeepSleep();
 80012ae:	f7ff ff95 	bl	80011dc <LL_LPM_EnableDeepSleep>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80012b2:	bf30      	wfi

  	/* Request Wait For Interrupt */
  	__WFI();
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40007000 	.word	0x40007000

080012bc <_init>:
 80012bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012be:	bf00      	nop
 80012c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012c2:	bc08      	pop	{r3}
 80012c4:	469e      	mov	lr, r3
 80012c6:	4770      	bx	lr

080012c8 <_fini>:
 80012c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ca:	bf00      	nop
 80012cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ce:	bc08      	pop	{r3}
 80012d0:	469e      	mov	lr, r3
 80012d2:	4770      	bx	lr
